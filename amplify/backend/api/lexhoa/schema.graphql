type Person @aws_api_key @aws_cognito_user_pools @model
  @auth(rules: [
    { allow: private, operations: [create, read] },
    { allow: owner, operations: [update] },
    { allow: groups, groups: ["BOARD"], operations: [update, delete] }
  ])
{
  id: ID!
  cognitoID: String @index(name: "byCognitoID", queryField: "personByCognitoID")
  name: String @index(name: "byName", queryField: "personByName")
  email: String @index(name: "byEmail", queryField: "personByEmail")
  address: String
  city: String
  state: String
  zip: String
  phone: String @index(name: "byPhoneCall", queryField: "personByPhoneCall")
  allowText: Boolean
  contactPref: ContactPrefs
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  owner: String
}
type Account @model 
  @auth(rules: [
    { allow: private, operations: [read] },
    { allow: owner, operations: [update] },
    { allow: groups, groups: ["BOARD"], operations: [create, update, delete] }
  ]) {
    id: ID!
    accountOwnerId: ID! @index(name: "byAccountOwner", queryField: "accountByOwner")
    accountName: String
    billingFreq: BillingFreq!
    balance: Float!
    createdAt: AWSDateTime
    updatedAt: AWSDateTime
    owner: String
}

type Property @model 
@auth(rules: [
  { allow: private, operations: [read] },
  { allow: groups, groups: ["BOARD"], operations: [create, update, delete] }
]) {
  id: ID!
  address: String!
  accountPropertiesId: ID @index(name: "byAccountProperties", queryField: "propertyByAccount")
  propertyTenantId: ID @index(name: "byTenant", queryField: "propertyByTenant")
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  owner: String
}

type Payment @model 
@auth(rules: [
  { allow: owner, operations: [read] },
  { allow: groups, groups: ["BOARD"], operations: [create, read, update, delete] }
]) {
  id: ID!
  checkDate: AWSDate!
  checkNumber: String!
  checkAmount: Float!
  invoiceNumber: String!
  invoiceAmount: Float!
  ownerPaymentsId: ID! @index(name: "byOwnerPayments", queryField: "paymentsByOwner")
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Bulletin @model 
  @auth(
    rules: [
      { allow: public, provider: apiKey, operations: [read] },
      { allow: private, provider: userPools, operations: [read] },
      { allow: groups, groups: ["BOARD"], operations: [create, update, delete, read] }
    ]
  )
{
  id: ID!
  title: String!
  content: String!
  type: String @default(value: "Bulletin")
    @index(
      name: "bulletinsByDate"
      queryField: "bulletinsByDate"
      sortKeyFields: ["createdAt"]
    )
  audience: [Audience]!
  createdAt: AWSDateTime!
}

enum ContactPrefs {
  CALL
  TEXT
  EMAIL
  PHYSICAL
}

enum BillingFreq {
  MONTHLY
  QUARTERLY
  SEMI
  ANNUAL
}

enum Audience {
  BOARD
  OWNERS
  RESIDENTS
  PUBLIC
}

input ModelAudienceInput {
  eq: Audience
  ne: Audience
  contains: Audience
}