type Profile @model
  @auth(rules: [
    { allow: private, operations: [create, read] },
    { allow: owner, operations: [update] },
    { allow: groups, groups: ["PRESIDENT", "SECRETARY"], operations: [create, update, delete] },
    { allow: groups, groups: ["BOARD"], operations: [create, update] },
    { allow: private, provider: iam, operations: [create] }
  ]) {
  id: ID!
  byTypeName: String @default(value: "PROFILE")
    @index(
      name: "byTypeName"
      queryField: "profilesByTypeName"
      sortKeyFields: ["name"]
    )
  byTypeBalance: String @default(value: "PROFILE")
    @index(
      name: "byTypeBalance"
      queryField: "profilesByTypeBalance"
      sortKeyFields: ["balance"]
    )
  byTypeCreatedAt: String @default(value: "PROFILE")
    @index(
      name: "byTypeCreatedAt"
      queryField: "profilesByTypeCreatedAt"
      sortKeyFields: ["createdAt"]
    )
  owner: String
    @auth(rules: [
      { allow: private, operations: [create, read] },
      { allow: owner, operations: [read] },
      { allow: groups, groups: ["PRESIDENT", "SECRETARY"], operations: [create, read, update, delete] }
    ])
  cognitoID: String @index(name: "byCognitoID", queryField: "profileByCognitoID")
  name: String! @index(name: "byName", queryField: "profileByName")
  email: String @index(name: "byEmail", queryField: "profileByEmail")
  phone: String
  address: String
  city: String
  state: String
  zip: String
  contactPref: ContactPrefs @default(value: "EMAIL")
  billingFreq: BillingFreq @default(value: "MONTHLY")
  allowText: Boolean @default(value: "false")
  balance: Float @auth(rules: [
    { allow: private, operations: [create, read] },
    { allow: owner, operations: [read] },
    { allow: groups, groups: ["BOARD"], operations: [create, read] },
    { allow: groups, groups: ["TREASURER", "PRESIDENT", "SECRETARY"], operations: [create, read, update, delete] }
  ])
  @default(value:"0.00")
  @index(
    name: "byBalance"
    queryField: "profilesByBalance"
    sortKeyFields: ["name"]
  )
  ownedProperties: [Property] @hasMany(indexName: "byOwner", fields: ["id"])
  payments: [Payment] @hasMany(indexName: "byOwnerPayments", fields: ["id"])
  tenantAt: Property @belongsTo(fields: ["tenantAtId"])
  tenantAtId: ID @index(name: "byTenantAt")
  createdPings: [Ping] @hasMany(indexName: "byCreator", fields: ["id"])
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Property @model
  @auth(rules: [
    { allow: private, operations: [read] },
    { allow: groups, groups: ["BOARD"], operations: [read, update] },
    { allow: groups, groups: ["PRESIDENT"], operations: [create, read, update, delete] },
  ])
{
  id: ID!
  type: String @default(value: "PROPERTY")
    @index(
      name: "byType"
      queryField: "propertiesByType"
      sortKeyFields: ["id"]
    )
  owner: String
  address: String! @index(name: "byAddress", queryField: "propertyByAddress")
  city: String @default (value: "West Columbia")
  state: String @default (value: "SC")
  zip: String @default (value: "29169")
  profOwner: Profile @belongsTo(fields: ["profOwnerId"])
  profOwnerId: ID @index(name: "byOwner")
  @auth(rules: [
    { allow: private, operations: [read] },
    { allow: groups, groups: ["BOARD", "PRESIDENT"], operations: [create, read, update, delete] }
  ])
  profTenant: Profile @hasOne(fields: ["profTenantId"])
  @auth(rules: [
    { allow: private, operations: [read] },
    { allow: owner, operations: [create, read, update] },
    { allow: groups, groups: ["BOARD", "PRESIDENT"], operations: [create, read, update, delete] }
  ])
  profTenantId: ID @index(name: "byTenant")
  @auth(rules: [
    { allow: private, operations: [read] },
    { allow: owner, operations: [create, read, update] },
    { allow: groups, groups: ["BOARD", "PRESIDENT"], operations: [create, read, update, delete] }
  ])
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Payment @model
  @auth(rules: [
    { allow: owner, operations: [read] },
    { allow: groups, groups: ["BOARD"], operations: [read] },
    { allow: groups, groups: ["TREASURER", "PRESIDENT"], operations: [create, read, update, delete] }
  ]) {
  id: ID!
  byTypeCreatedAt: String @default(value: "PAYMENT")
    @index(
      name: "byTypeCreatedAt"
      queryField: "paymentsByTypeCreatedAt"
      sortKeyFields: ["createdAt"]
    )
  byTypeCheckDate: String @default(value: "PAYMENT")
    @index(
      name: "byTypeCheckDate"
      queryField: "paymentsByTypeCheckDate"
      sortKeyFields: ["checkDate"]
    )
  byTypeInvoiceNumber: String @default(value: "PAYMENT")
    @index(
      name: "byTypeInvoiceNumber"
      queryField: "paymentsByTypeInvoiceNumber"
      sortKeyFields: ["invoiceNumber"]
    )
  checkDate: AWSDate! @index(name: "byCheckDate", queryField: "paymentsByCheckDate")
  checkNumber: String! @index(name: "byCheckNumber", queryField: "paymentsByCheckNumber")
  checkAmount: Float!
  invoiceNumber: String! @index(name: "byInvoiceNumber", queryField: "paymentsByInvoiceNumber")
  invoiceAmount: Float!
  ownerPayments: Profile @belongsTo(fields: ["ownerPaymentsId"])
  ownerPaymentsId: ID! @index(name: "byOwnerPayments", queryField: "paymentsByOwner", sortKeyFields: ["checkDate", "invoiceNumber"])
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Bulletin @model
  @auth(
    rules: [
      { allow: public, provider: apiKey, operations: [read] },
      { allow: private, provider: userPools, operations: [read] },
      { allow: groups, groups: ["BOARD"], operations: [read] },
      { allow: groups, groups: ["MEDIA", "PRESIDENT"], operations: [create, read, update, delete] }
    ]
  ) {
  id: ID!
  title: String!
  content: String!
  type: String @default(value: "BULLETIN")
    @index(
      name: "bulletinsByDate"
      queryField: "bulletinsByDate"
      sortKeyFields: ["createdAt"]
    )
  audience: [Audience]!
  createdAt: AWSDateTime!
}

type Ping @model
  @auth(
    rules: [
      { allow: private, provider: userPools, operations: [create, read] },
      { allow: groups, groups: ["BOARD", "PRESIDENT"], operations: [create, read, update, delete] }
    ]
  ) {
  id: ID!
  type: String @default(value: "Ping")
    @index(
      name: "pingByDate"
      queryField: "pingByDate"
      sortKeyFields: ["createdAt"]
    )
  items: [String]
  instruction: String
  status: PingStatus @default(value: "PENDING")
  profCreator: Profile @belongsTo(fields: ["profCreatorId"])
  profCreatorId: ID @index(name: "byCreator", sortKeyFields: ["createdAt"])
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

enum PingStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ContactPrefs {
  CALL
  TEXT
  EMAIL
  PHYSICAL
}

enum BillingFreq {
  MONTHLY
  QUARTERLY
  SEMI
  ANNUAL
}

enum Audience {
  BOARD
  OWNERS
  RESIDENTS
  PUBLIC
}

input ModelAudienceInput {
  eq: Audience
  ne: Audience
  contains: Audience
}

# Define your types for Cognito user management
type CognitoUser {
  username: String
  email: String
  enabled: Boolean
  userStatus: String
  userCreateDate: String
  userLastModifiedDate: String
}

type UserAttributes {
  name: String
  email: String
  phone_number: String
  # Add other attributes as needed
}

type UserGroup {
  groupName: String!
}

type UserListResult {
  users: [CognitoUser]
}

type UserResult {
  user: CognitoUser
}

type GroupListResult {
  groups: [UserGroup]
}

type MutationResult {
  success: Boolean!
  message: String
}

# Define your custom queries and mutations
type Query {
  listUsersInGroup(groupName: String!): [CognitoUser]
}

type Mutation {
  manageCognitoGroups(action: String!, groupName: String!, cognitoId: String!): MutationResult
    @function(name: "manageCognitoGroups-${env}")
  processMonthlyPropertyDues: MutationResult
    @function(name: "monthlyPropertyDues-${env}")
}
